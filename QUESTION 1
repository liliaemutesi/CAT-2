#!/bin/bash

# Check if there is exactly one command line argument
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <positive_integer>"
    exit 1
fi

# Check if the command line argument is a positive integer
if ! [[ $1 =~ ^[1-9][0-9]*$ ]]; then
    echo "Error: Please provide a positive integer."
    exit 1
fi

number=$1

# Function to calculate the sum of digits
get_digit_sum() {
    local num=$1
    local sum=0
    while [ $num -gt 0 ]; do
        ((sum += num % 10))
        ((num /= 10))
    done
    echo $sum
}

# Function to calculate the product of digits
get_digit_product() {
    local num=$1
    local product=1
    while [ $num -gt 0 ]; do
        ((product *= num % 10))
        ((num /= 10))
    done
    echo $product
}

# Function to check if a number is palindrome
is_palindrome() {
    local num=$1
    local reversed=$(echo $num | rev)
    [ "$num" == "$reversed" ]
}

# Function to check if a number is prime
is_prime() {
    local num=$1
    for ((i = 2; i * i <= num; i++)); do
        if [ $((num % i)) -eq 0 ]; then
            return 1 # Not prime
        fi
    done
    return 0 # Prime
}

# Menu to choose operation
echo "Choose operation:"
echo "1. Display the sum and product of the digits"
echo "2. Check if it's a palindrome"
echo "3. Check if it's a prime number"

read choice

case $choice in
    1)
        sum=$(get_digit_sum $number)
        product=$(get_digit_product $number)
        echo "Sum of digits: $sum"
        echo "Product of digits: $product"
        ;;
    2)
        if is_palindrome $number; then
            echo "The number is a palindrome."
        else
            echo "The number is not a palindrome."
        fi
        ;;
    3)
        if is_prime $number; then
            echo "The number is prime."
        else
            echo "The number is not prime."
        fi
        ;;
    *)
        echo "Invalid choice. Please choose 1, 2, or 3."
        ;;
esac
